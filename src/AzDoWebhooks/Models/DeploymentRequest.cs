using System;
using System.Collections.Generic;

using System.Text.Json;
using System.Text.Json.Serialization;
using System.Globalization;

namespace AzDoWebhooks.Models;

// public class DeploymentRequest
// {
//     public string Environment { get; set; } = "";
//     public string Project { get; set; } = "";
//     public string Status { get; set; } = "";
//     public DateTime DeploymentTime { get; set; }
//     public string partitionKey { get; set; } = "";
// }

// <auto-generated />
// https://app.quicktype.io/
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using AzDoWebhooks.Models;
//
//    var deployment = DeploymentRequest.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603




public partial class DeploymentRequest
{
    [JsonPropertyName("subscriptionId")]
    public Guid SubscriptionId { get; set; }

    [JsonPropertyName("notificationId")]
    public long NotificationId { get; set; }

    [JsonPropertyName("id")]
    public Guid Id { get; set; }

    [JsonPropertyName("eventType")]
    public string EventType { get; set; }

    [JsonPropertyName("publisherId")]
    public string PublisherId { get; set; }

    [JsonPropertyName("message")]
    public Message Message { get; set; }

    [JsonPropertyName("detailedMessage")]
    public Message DetailedMessage { get; set; }

    [JsonPropertyName("resource")]
    public Resource Resource { get; set; }

    [JsonPropertyName("resourceVersion")]
    public string ResourceVersion { get; set; }

    [JsonPropertyName("resourceContainers")]
    public ResourceContainers ResourceContainers { get; set; }

    [JsonPropertyName("createdDate")]
    public DateTimeOffset CreatedDate { get; set; }
}

public partial class Message
{
    [JsonPropertyName("text")]
    public string Text { get; set; }
}

public partial class Resource
{
    [JsonPropertyName("environment")]
    public Environment Environment { get; set; }

    [JsonPropertyName("project")]
    public Project Project { get; set; }

    [JsonPropertyName("deployment")]
    public Deployment Deployment { get; set; }

    [JsonPropertyName("comment")]
    public object Comment { get; set; }

    [JsonPropertyName("data")]
    public Data Data { get; set; }

    [JsonPropertyName("stageName")]
    public object StageName { get; set; }

    [JsonPropertyName("attemptId")]
    public long AttemptId { get; set; }

    [JsonPropertyName("id")]
    public long Id { get; set; }

    [JsonPropertyName("url")]
    public object Url { get; set; }
}

public partial class Data
{
}

public partial class Deployment
{
    [JsonPropertyName("id")]
    public long Id { get; set; }

    [JsonPropertyName("release")]
    public Release Release { get; set; }

    [JsonPropertyName("releaseDefinition")]
    public object ReleaseDefinition { get; set; }

    [JsonPropertyName("releaseEnvironment")]
    public Release ReleaseEnvironment { get; set; }

    [JsonPropertyName("projectReference")]
    public object ProjectReference { get; set; }

    [JsonPropertyName("definitionEnvironmentId")]
    public long DefinitionEnvironmentId { get; set; }

    [JsonPropertyName("attempt")]
    public long Attempt { get; set; }

    [JsonPropertyName("reason")]
    public string Reason { get; set; }

    [JsonPropertyName("deploymentStatus")]
    public string DeploymentStatus { get; set; }

    [JsonPropertyName("operationStatus")]
    public string OperationStatus { get; set; }

    [JsonPropertyName("requestedBy")]
    public object RequestedBy { get; set; }

    [JsonPropertyName("startedOn")]
    public DateTimeOffset StartedOn { get; set; }

    [JsonPropertyName("completedOn")]
    public DateTimeOffset CompletedOn { get; set; }

    [JsonPropertyName("lastModifiedOn")]
    public DateTimeOffset LastModifiedOn { get; set; }

    [JsonPropertyName("lastModifiedBy")]
    public object LastModifiedBy { get; set; }

    [JsonPropertyName("conditions")]
    public object[] Conditions { get; set; }

    [JsonPropertyName("preDeployApprovals")]
    public object[] PreDeployApprovals { get; set; }

    [JsonPropertyName("postDeployApprovals")]
    public object[] PostDeployApprovals { get; set; }

    [JsonPropertyName("_links")]
    public Data Links { get; set; }
}

public partial class Release
{
    [JsonPropertyName("id")]
    public long Id { get; set; }

    [JsonPropertyName("name")]
    public string Name { get; set; }

    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("artifacts")]
    public object[] Artifacts { get; set; }

    [JsonPropertyName("_links")]
    public Links Links { get; set; }
}

public partial class Links
{
    [JsonPropertyName("web")]
    public Web Web { get; set; }
}

public partial class Web
{
    [JsonPropertyName("href")]
    public Uri Href { get; set; }
}

public partial class Environment
{
    [JsonPropertyName("id")]
    public long Id { get; set; }

    [JsonPropertyName("releaseId")]
    public long ReleaseId { get; set; }

    [JsonPropertyName("name")]
    public string Name { get; set; }

    [JsonPropertyName("status")]
    public string Status { get; set; }

    [JsonPropertyName("variables")]
    public Data Variables { get; set; }

    [JsonPropertyName("variableGroups")]
    public object[] VariableGroups { get; set; }

    [JsonPropertyName("preDeployApprovals")]
    public object[] PreDeployApprovals { get; set; }

    [JsonPropertyName("postDeployApprovals")]
    public object[] PostDeployApprovals { get; set; }

    [JsonPropertyName("preApprovalsSnapshot")]
    public PreApprovalsSnapshot PreApprovalsSnapshot { get; set; }

    [JsonPropertyName("postApprovalsSnapshot")]
    public PostApprovalsSnapshot PostApprovalsSnapshot { get; set; }

    [JsonPropertyName("deploySteps")]
    public object[] DeploySteps { get; set; }

    [JsonPropertyName("rank")]
    public long Rank { get; set; }

    [JsonPropertyName("definitionEnvironmentId")]
    public long DefinitionEnvironmentId { get; set; }

    [JsonPropertyName("queueId")]
    public long QueueId { get; set; }

    [JsonPropertyName("environmentOptions")]
    public EnvironmentOptions EnvironmentOptions { get; set; }

    [JsonPropertyName("demands")]
    public object[] Demands { get; set; }

    [JsonPropertyName("conditions")]
    public object[] Conditions { get; set; }

    [JsonPropertyName("modifiedOn")]
    public DateTimeOffset ModifiedOn { get; set; }

    [JsonPropertyName("workflowTasks")]
    public object[] WorkflowTasks { get; set; }

    [JsonPropertyName("deployPhasesSnapshot")]
    public object[] DeployPhasesSnapshot { get; set; }

    [JsonPropertyName("owner")]
    public Owner Owner { get; set; }

    [JsonPropertyName("scheduledDeploymentTime")]
    public DateTimeOffset ScheduledDeploymentTime { get; set; }

    [JsonPropertyName("schedules")]
    public object[] Schedules { get; set; }

    [JsonPropertyName("release")]
    public Release Release { get; set; }

    [JsonPropertyName("releaseDefinition")]
    public ReleaseDefinition ReleaseDefinition { get; set; }

    [JsonPropertyName("preDeploymentGatesSnapshot")]
    public DeploymentGatesSnapshot PreDeploymentGatesSnapshot { get; set; }

    [JsonPropertyName("postDeploymentGatesSnapshot")]
    public DeploymentGatesSnapshot PostDeploymentGatesSnapshot { get; set; }
}

public partial class EnvironmentOptions
{
    [JsonPropertyName("emailNotificationType")]
    public string EmailNotificationType { get; set; }

    [JsonPropertyName("emailRecipients")]
    public string EmailRecipients { get; set; }

    [JsonPropertyName("skipArtifactsDownload")]
    public bool SkipArtifactsDownload { get; set; }

    [JsonPropertyName("timeoutInMinutes")]
    public long TimeoutInMinutes { get; set; }

    [JsonPropertyName("enableAccessToken")]
    public bool EnableAccessToken { get; set; }

    [JsonPropertyName("publishDeploymentStatus")]
    public bool PublishDeploymentStatus { get; set; }

    [JsonPropertyName("badgeEnabled")]
    public bool BadgeEnabled { get; set; }

    [JsonPropertyName("autoLinkWorkItems")]
    public bool AutoLinkWorkItems { get; set; }

    [JsonPropertyName("pullRequestDeploymentEnabled")]
    public bool PullRequestDeploymentEnabled { get; set; }
}

public partial class Owner
{
    [JsonPropertyName("displayName")]
    public string DisplayName { get; set; }

    [JsonPropertyName("id")]
    public Guid Id { get; set; }
}

public partial class PostApprovalsSnapshot
{
    [JsonPropertyName("approvals")]
    public object[] Approvals { get; set; }
}

public partial class DeploymentGatesSnapshot
{
    [JsonPropertyName("id")]
    public long Id { get; set; }

    [JsonPropertyName("gatesOptions")]
    public object GatesOptions { get; set; }

    [JsonPropertyName("gates")]
    public object[] Gates { get; set; }
}

public partial class PreApprovalsSnapshot
{
    [JsonPropertyName("approvals")]
    public object[] Approvals { get; set; }

    [JsonPropertyName("approvalOptions")]
    public ApprovalOptions ApprovalOptions { get; set; }
}

public partial class ApprovalOptions
{
    [JsonPropertyName("requiredApproverCount")]
    public long RequiredApproverCount { get; set; }

    [JsonPropertyName("releaseCreatorCanBeApprover")]
    public bool ReleaseCreatorCanBeApprover { get; set; }

    [JsonPropertyName("autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped")]
    public bool AutoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped { get; set; }

    [JsonPropertyName("enforceIdentityRevalidation")]
    public bool EnforceIdentityRevalidation { get; set; }

    [JsonPropertyName("timeoutInMinutes")]
    public long TimeoutInMinutes { get; set; }

    [JsonPropertyName("executionOrder")]
    public string ExecutionOrder { get; set; }
}

public partial class ReleaseDefinition
{
    [JsonPropertyName("id")]
    public long Id { get; set; }

    [JsonPropertyName("name")]
    public string Name { get; set; }

    [JsonPropertyName("projectReference")]
    public object ProjectReference { get; set; }

    [JsonPropertyName("_links")]
    public Data Links { get; set; }
}

public partial class Project
{
    [JsonPropertyName("id")]
    public Guid Id { get; set; }

    [JsonPropertyName("name")]
    public string Name { get; set; }
}

public partial class ResourceContainers
{
    [JsonPropertyName("collection")]
    public Account Collection { get; set; }

    [JsonPropertyName("account")]
    public Account Account { get; set; }

    [JsonPropertyName("project")]
    public Account Project { get; set; }
}

public partial class Account
{
    [JsonPropertyName("id")]
    public Guid Id { get; set; }
}

public partial class DeploymentRequest
{
    public static DeploymentRequest FromJson(string json) => JsonSerializer.Deserialize<DeploymentRequest>(json, AzDoWebhooks.Models.Converter.Settings);
}

public static class Serialize
{
    public static string ToJson(this DeploymentRequest self) => JsonSerializer.Serialize(self, AzDoWebhooks.Models.Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
    {
        Converters =
        {
            new DateOnlyConverter(),
            new TimeOnlyConverter(),
            IsoDateTimeOffsetConverter.Singleton
        },
    };
}

public class DateOnlyConverter : JsonConverter<DateOnly>
{
    private readonly string serializationFormat;
    public DateOnlyConverter() : this(null) { }

    public DateOnlyConverter(string? serializationFormat)
    {
        this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
    }

    public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        var value = reader.GetString();
        return DateOnly.Parse(value!);
    }

    public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
}

public class TimeOnlyConverter : JsonConverter<TimeOnly>
{
    private readonly string serializationFormat;

    public TimeOnlyConverter() : this(null) { }

    public TimeOnlyConverter(string? serializationFormat)
    {
        this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
    }

    public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        var value = reader.GetString();
        return TimeOnly.Parse(value!);
    }

    public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
}

internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
{
    public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

    private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

    private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
    private string? _dateTimeFormat;
    private CultureInfo? _culture;

    public DateTimeStyles DateTimeStyles
    {
        get => _dateTimeStyles;
        set => _dateTimeStyles = value;
    }

    public string? DateTimeFormat
    {
        get => _dateTimeFormat ?? string.Empty;
        set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
    }

    public CultureInfo Culture
    {
        get => _culture ?? CultureInfo.CurrentCulture;
        set => _culture = value;
    }

    public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
    {
        string text;


        if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
        {
            value = value.ToUniversalTime();
        }

        text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

        writer.WriteStringValue(text);
    }

    public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        string? dateText = reader.GetString();

        if (string.IsNullOrEmpty(dateText) == false)
        {
            if (!string.IsNullOrEmpty(_dateTimeFormat))
            {
                return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
            }
            else
            {
                return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
            }
        }
        else
        {
            return default(DateTimeOffset);
        }
    }


    public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
}

#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
